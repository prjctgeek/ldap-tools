#!/usr/bin/env python
'''
Doug Chapman
Jun 2012

read an ldif file
generate a csv
'''
import csv
import sys
import optparse
from ldif import LDIFParser,LDIFWriter

def get_options():
    usage = "usage: %prog [options]"
    OptionParser = optparse.OptionParser
    parser = OptionParser(usage)
    parser.add_option("-o", "--csv", action="store", type="string", \
             dest="csv_file", help="csv input file")
    parser.add_option("-i", "--ldif", action="store", type="string", \
             dest="ldif_file", help="ldif file to write to")
    parser.add_option("-a", "--attr", action="append", type="string", \
             dest="ldif_attr", help="attribute")
    options, args = parser.parse_args()
    return options, args

class ParseRecords(LDIFParser):
           def __init__(self, input,output,attrlist):
                #keys to pull out of ldif
                self.attrlist=attrlist
                LDIFParser.__init__(self,input)
                #open the output file
                self.csv_writer = csv.writer(open(output,'wb'))
                #write a header row
                self.csv_writer.writerow(attrlist)
           def handle(self,dn, entry):
                #we must enforce some kind of key to exist
                if 'mail' in entry:
                        row=[]
                        #walk the attribute list looking for attributes
                        #if we don't find it, put in a null
                        for i in self.attrlist:
                                if i in entry:
                                   row.append(entry[i][0])
                                else:
                                   #not present,so add a null
                                   row.append('')
                        #print row
                        self.csv_writer.writerow(row)


def main():
    options, args = get_options()
    if not options.csv_file:
        print "Try --help"
        sys.exit(1)
    with open(options.ldif_file) as input:
        ParseRecords(input,options.csv_file,options.ldif_attr).parse()

if __name__ == "__main__":
    main()
